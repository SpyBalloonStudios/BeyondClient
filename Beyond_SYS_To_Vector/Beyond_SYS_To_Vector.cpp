#include <iostream>
#include <fstream>
#include <vector>
#include <cstdint>
#include <string>

std::vector<std::uint8_t> readDriverFile(const std::string& filename) {
    std::ifstream file(filename, std::ios::binary | std::ios::ate);
    if (!file.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        return {};
    }

    std::streamsize size = file.tellg();
    file.seekg(0, std::ios::beg);

    std::vector<std::uint8_t> buffer(static_cast<std::size_t>(size));
    if (file.read(reinterpret_cast<char*>(buffer.data()), size)) {
        return buffer;
    }
    else {
        std::cerr << "Error reading file: " << filename << std::endl;
        return {};
    }
}

void saveToHeaderFile(const std::string& outputFilename, const std::vector<std::uint8_t>& data) {
    std::ofstream headerFile(outputFilename);
    if (!headerFile.is_open()) {
        std::cerr << "Error opening file for writing: " << outputFilename << std::endl;
        return;
    }

    headerFile << "#pragma once\n\n";
    headerFile << "// Automatically generated by the driver-to-header script\n";
    headerFile << "const std::vector<std::uint8_t> driverData = {\n";

    for (std::size_t i = 0; i < data.size(); ++i) {
        headerFile << "0x" << std::hex << static_cast<int>(data[i]);

        if (i < data.size() - 1) {
            headerFile << ",";
        }

        headerFile << "\n";
    }

    headerFile << "};\n";
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <driver_file.sys>\n";
        return 1;
    }

    const std::string driverFilename = argv[1];
    const std::string outputHeaderFilename = "DriverData.h";  // Replace with your desired output header filename

    std::vector<std::uint8_t> driverData = readDriverFile(driverFilename);

    if (!driverData.empty()) {
        // Save the data into a .h file
        saveToHeaderFile(outputHeaderFilename, driverData);

        std::cout << "Driver read successfully. Size: " << driverData.size() << " bytes.\n";
        std::cout << "Data saved to " << outputHeaderFilename << ".\n";
    }

    return 0;
}
